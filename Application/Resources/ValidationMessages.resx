<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmPasswordRequired" xml:space="preserve">
    <value>Confirm password is required</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="FieldLength100" xml:space="preserve">
    <value>Fields is to long. Max: 100</value>
  </data>
  <data name="FieldLength200" xml:space="preserve">
    <value>Fields is to long. Max: 200</value>
  </data>
  <data name="FieldLength300" xml:space="preserve">
    <value>Fields is to long. Max: 300</value>
  </data>
  <data name="FieldLength500" xml:space="preserve">
    <value>Fields is to long. Max: 500</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Email is not valid</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="NameRequired1" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="PasswordMinLength" xml:space="preserve">
    <value>Password must be 8 lenght long</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="PasswordsMustMatch" xml:space="preserve">
    <value>Passwords is not the same</value>
  </data>
  <data name="FieldLength30" xml:space="preserve">
    <value>Fields is to long. Max: 30</value>
  </data>
  <data name="PhoneRequired" xml:space="preserve">
    <value>Phone is required</value>
  </data>
  <data name="UserAlreadyExists" xml:space="preserve">
    <value>User already exists</value>
  </data>
  <data name="PetNameRequired" xml:space="preserve">
    <value>Pet name is required</value>
  </data>
  <data name="PetNameLength" xml:space="preserve">
    <value>Pet name cannot exceed 100 characters</value>
  </data>
  <data name="PetNameFormat" xml:space="preserve">
    <value>Pet name can only contain letters and spaces</value>
  </data>
  <data name="AgeRequired" xml:space="preserve">
    <value>Age is required</value>
  </data>
  <data name="AgeRange" xml:space="preserve">
    <value>Age must be between 1 and 30 years</value>
  </data>
  <data name="BioRequired" xml:space="preserve">
    <value>Bio is required</value>
  </data>
  <data name="HistoryRequired" xml:space="preserve">
    <value>History is required</value>
  </data>
  <data name="AddressRequired" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="NeighborhoodRequired" xml:space="preserve">
    <value>Neighborhood is required</value>
  </data>
  <data name="CityRequired" xml:space="preserve">
    <value>City is required</value>
  </data>
  <data name="StateRequired" xml:space="preserve">
    <value>State is required</value>
  </data>
  <data name="CEPRequired" xml:space="preserve">
    <value>CEP is required</value>
  </data>
  <data name="CEPFormat" xml:space="preserve">
    <value>CEP must be in format 12345-678 or 12345678</value>
  </data>
  <data name="NumberRequired" xml:space="preserve">
    <value>Number is required</value>
  </data>
  <data name="PetTypeRequired" xml:space="preserve">
    <value>Pet type is required</value>
  </data>
  <data name="PetBreedRequired" xml:space="preserve">
    <value>Pet breed is required</value>
  </data>
  <data name="UserIdRequired" xml:space="preserve">
    <value>User ID is required</value>
  </data>
  <data name="ClerkIdRequired" xml:space="preserve">
    <value>Clerk ID is required</value>
  </data>
  <data name="ProviderRequired" xml:space="preserve">
    <value>Provider is required</value>
  </data>
  <data name="CPFRequired" xml:space="preserve">
    <value>CPF is required</value>
  </data>
  <data name="CPFFormat" xml:space="preserve">
    <value>CPF must be in format 123.456.789-01 or 12345678901</value>
  </data>
  <data name="BirthDateInvalid" xml:space="preserve">
    <value>Birth date cannot be in the future</value>
  </data>
  <data name="BirthDateRange" xml:space="preserve">
    <value>Birth date seems invalid</value>
  </data>
  <data name="PhoneFormat" xml:space="preserve">
    <value>Invalid phone number format</value>
  </data>
  <data name="FieldLength10" xml:space="preserve">
    <value>Field is too long. Max: 10</value>
  </data>
  <data name="FieldLength50" xml:space="preserve">
    <value>Field is too long. Max: 50</value>
  </data>
  <data name="FieldLength1000" xml:space="preserve">
    <value>Field is too long. Max: 1000</value>
  </data>
</root>